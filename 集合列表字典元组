#创建空列表
l1 = []
#type是内置函数，负责打印出变量的类型
print(type(l1))
print(l1)

#创建带值的列表
l2 = [100]
print(type(l2))
print(l2)

#创建列表，带多个值
l3 = [1,2,3,4,5,6]
print(type(l3))
print(l3)

#使用list()
l4 = list()
print(type(l4))
print(l4)


#下标访问列表
l=[1,2,3,6,7,5,7,4]
l[2]
print(l[2])
print(l[0])
#分片操作
#截取范围，包含左边的下标值，不包含右边的下标值
print(l[1:4])
#下标值可以为空，如果不写，左边下表默认值为0，右边下标值为最大值加一，即表示截取到最后一个数据
print(l[3:])
#分片可以控制增长长度，默认增长幅度为一
print(l[1:6:1])
print(l[1:6:2])
#下标可以超出范围，超出则不在考虑多余下表内容
print(l[1:10])


#下标值，增长长度可以为负数
#为负数，表明顺序是从右往左
#规定：数组最后一个数字的下标是-1


#分片之负数下标
print(l)

#下面显示的为空，因为默认分片总是从左向右截取
#即正常情况，分片左边值一定小于右边值

print(l[-2:-4])
print(l[-4:-2])

#如果分片一定左边值比右边大，则步长参数需要使用负数
#此案例为list直接正反颠倒提供了一个思路

print(l[-2:-6:-1])


#id字符串举例
a=100
b=200
print(id(a))
print(id(b))

c=a

print(id(c))

#如果a和c只是同一份数据，则更改a的值同样也会更改c的值
#但是，结果并非如此，为什么？
a=101
print(a)
print(c)


#通过id可以直接判断出分片是从新生成了一份数据还是使用同一份数据
l = [1,2,4,5,8,33,5,6]
ll = l[:]
lll = ll
#如果两个id值一样，则表明分片产生的列表是使用同一地址同意数据
#否则，则表明分片是从新生成了一份数据，即一个新的列表，然后把数值拷贝到新的列表中
print(id(l))
print(id(ll))
print(id(lll))

#通过id知道，ll和lll是同一份数据，验证代码如下
l[1] = 100
print(l)
print(ll)

ll[1] = 100
print(ll)
print(lll)


