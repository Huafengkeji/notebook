# 变量
·程序=数据结构+算法
·变量就是可以重复使用的一个量，或者叫一个代号
·变量命名规则
    ·变量命名可以包含数字，大小字母，下划线或者更多，但是我们不推荐除了前三种内容之间的符号
    ·数字不可以打头
        ·4man,5for是不可以的
        ·man4,for5是可以的
    ·一般在Python中，以下划线开头的内容具有特殊韩宜，不建议使用
        ·比如_age,_name，理论可以，但强烈不推荐，包括但不限于一个下划线开头和两个连续下划线开头
    ·大小写不一样，俗称大小写敏感
        ·Forman和forMan不是一个变量名称
    ·推荐
        ·使用具有固定含义的英文单词或者缩写，srv=server skt=socket,一般以posix命名规则为主
        ·驼峰命名法
            ·大驼峰，每个单词第一个字母军大写
                ·在Python中给类命名使用此法
                ·MyfirstLove,IntOne
            ·小驼峰，类似大驼峰，但第一个字母小写
                ·在Python中一般给普通变量或者函数命名
                ·myFirstLove,intOne
            ·posix写法
                ·多个单词下划线链接
                ·单词全部小写
                ·my_first_love
        ·关键词和保留字
            ·变量名必须避开，不能跟关键字和保留字重复
            ·class,break,def,for


##变量声明
age1,age2,age3 = 12,13,45
print(age1)
print(age2)
print(age3)


# 变量类型
·严格意义上讲，Python只有一个类型
·标准数据一共有6种
    ·数据类型number
    ·字符串类型str
    ·列表list
    ·元组tuple 
    ·字典dictionary
    ·集合set
    
    
height=156.34
print(height)

shili=0.2
print(shili)

a=5+3j
print(a)


s="i love xiewenwen"
print(s)
ss="let's go"
print(ss)
sss='let\'s go'
print(sss)
ssss="c:\\user"
print(ssss)


s="xxx,您好，我们图灵学院开课了，免费的python，补血白不学，学历也白学"
print(s)


s="i am %d years old"
print(s)
print(s%18)


f="i an %s, i am %d years old"
print(f)
print(f%("tulignxueyuan",18))


###format函数格式化字符串
·直接用format函数进行格式化
·推荐使用这种方法
·在使用上，亿{}和：代替%，后面用format带参数完成。


c="I love {}".format("wangxiaoming")
print(c)
c="yes,I am {1} years old,I love {0} and I an {0} years old".format("tulignxueyuan",20)
print(c)


##none
·表示什么都没有
·表示函数没有返回值，可以返回 None
·用来接触变量标定


#表达式
·有一个或几个数字或者变量和运算符组成的一行代码
·通常会返回一个结果
#运算符
·有一个以上的值经过变化等到新值的过程就叫运算
·用于运算的符号叫运算符
·运算符分类
   ·算数运算符
   ·比较或关系运算符
   ·赋值运算符
   ·逻辑运算符
   ·位运算
   ·成员运算
   ·身份运算符
   
算数运算符
·运行算数运算的符号
·pyrhon没有自增自减运算符


# +，-跟正常运算符一摸一样
#乘号用（*）代替
#除号用（/）代替

a=9+3-2
print(a)

# 在python2.x和python3.x中，除号（/）结果可能不一样，
a=9/4
print(a)

# %取余运算
#两个数字相除应该有商数有余数
a=9%4
print(a)

# //表示取商运算，也叫地板除
a=9//4
print(a)

# **表示幂运算
a=9**4
print(a)


# =, 赋值
a=0
c=a=4

# +=,是缩写
a+= 7 # a=a+7 的缩写
print(a)
c=4
c+=4
print(c)

#所有数字运算符都有缩写形势
# -=， *=， /=， //=， **=，都是缩写形式。
c-=3
print(c)
c*=2
print(c)
c/=2
print(c)
c//=2
print(c)
c**=2
print(c)
c%=3
print(c)


#逻辑运算符
·对布尔值进行计算的符号
·and逻辑 与
·or逻辑 或
·not逻辑 非
·python中逻辑运算没有 异或运算
·运算规则
    ·and看作乘法，or看作加法
    ·True看作1，False看作0
    ·则逻辑运算就能转化成数学运算
    ·最后结果是0则为False,否则为True 
·逻辑运算的短路问题
    ·逻辑运算式，按照计算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回。
    
    
#逻辑运算符案例
a=True
b=False
c=True

# 以下式子等价于 d=1+0*1
d=a and b or a
print(d)

d=a or b and a 
print(d)


# 逻辑运算的有趣案例

# 下面的逻辑表达式，a的值一定是True,则运行到or的时候，则整个式子不在向下计算
a=True or xxxxxx
print(a)

a=False and xxxxxx
print(a)

#下面表达式，如果xxxx中包含赋值表达式，则结果很难预期
#代码示例（伪代码）
b=0
a=a or (b=9) and 6
#假定上面的表达式若果没有语法错误
#则b的最终值应该是0而不是9
print(a)
print(b)


#案例
l=[1,2,3,4,5,6]
a=7
b=a in l
print(b)

a=4 
print(a not in l)
print(a in l)


a=9
b=9
print(a is b)

a="i love wangxiaomign "
b="i love wangxiaomign"
print(a is b)


#程序结构
·顺序
·分支
·循环


#分支
      
    if条件表达式：
        语句1
        语句2
        语句3
        ......
·条件表达式就是计算结果必须为布尔值的表达式（符号和规则）
·表达式后边的冒号不能少
·注意if后边出现的语句，如果属于if语句块，则必须同一个缩进等级
·条件表达结果为True执行if后边的缩进语句块


age=17
if age < 18:
    print("去叫家长吧，孩纸")
    print("我们不带你玩")
    print("滚球的")
    
    
age=17
if age < 18:
    print("去叫家长吧，孩纸")
    print("我们不带你玩")
    print("滚球的")
    
print("开始上车了，老司机们")


gender = "男"
if gender == "女":
    print("来，叔叔给你糖吃")
    
print("开始讲for循环了")



双向分支
·if..else...语句

        if条件表达式：
            语句1
            语句2
        else
            语句1
            语句2
            .....
·双向分支有两个分支，当程序执行到if..else...语句时候，一定会执行if或else中的一个，也仅执行一个
·缩进语句，if和else一个层级，其余语句一个层级


#input的作用是
#1.在屏幕上输出括号内的字符
#2.接受用户输入的内容并返回到程序
#3.input返回的内容一定是字符串类型

gender=input("请输入性别:")
print("你输入的性别是：{0}".format(gender))

if gender=="男":
    print("来，我们纪念一下今天吧")
else:
    print("发糖楼")
    print("送礼物了")

print("开始上课楼")


#score  存放学生成绩
#注意input的返回值类型
#需要把str转化成int
score=input("请输入学生成绩：")
score=int(score)
if score>=90:
    print("A")
if score>=80 and score<90:
    print("B")
if score>=70 and score<80:
    print("C")
if score>=60 and score<70:
    print("D")
if score<60:
    print("起开，我没你这学生")
    
    
#多路分支
·很多路分支的情况，简称多路分支
        
    if 条件表达式：
        语句1
        ....
    elif 条件表达式：
        语句1
        ....
·elif可以有很多个
·else可以没有
·多路分支只会执行一个


score=input("请输入学生成绩：")
score=int(score)
if score>=90:
    print("A")
elif score>=80:
    print("B")
elif score>=70:
    print("C")
elif score>=60:
    print("D")
else:
    print("起开，我没你这学生")


##if 其他语句
·if语句可以做嵌套使用，但不推荐
·python没有switch.case语句


#循环语句
·重复执行某些固定语句或者处理基本固定的事物
·分类
    ·for循环
    ·while循环
#for循环
·for循环 

        for 变量 in 序列：
            语句1
            语句2
            .....
            
            
for name in ["zhangsan","lisi","wangwu"]:
    print(name)
    
    
for name in ["zhangsan","lisi","wangwu","jingjing"]:
    print(name)
    if name=="jingjing":
        print("我最爱的{0}出现了".format(name))
    else:
        print("同学们我们不约，不约，请自重")


#range联系
#打印1-10的数字
#注意，一般在python中，如果由表示数字的两个数，一般是包含左边的数字不包含右边的数字
#randit是特例，他左右都包含
#range函数在python2 和 python3中有严重区别

for i in range(1,10):
    print(i)

for i in randint(1,10):
    print(i)
    
    
for-else语句
·当for循环结束时，会执行else语句
·else语句是可选的


for name in ["zhangsan","lisi","wangwu","jingjing"]:
    print(name)
    if name=="jingjing":
        print("我最爱的{0}出现了".format(name))
    else:
        print("同学们我们不约，不约，请自重")
else:
        print("别的都不是我的学生，不会在爱了")
        
        
循环之break，continue，pass
·break：无条件结束整个循环，简称循环猝死
·continue：无条件结束本次循环，从新进入下一次循环
·pass:表示虐过


for i in range(1,11):
    if i==7:
        print("我找到了")
        break
    else:
        print(i)
        
        
for i in range(1,11):
    if i%2==1:
        continue
    
    print("{0}是偶数".format(i))
    
    
 for i in range(1,11):
    pass 
    print("i love xiewenwne")
print("xia wuhao")


#while 循环
·一个循环语句
·表示当条件结束时，就停止
·不知道具体的循环次数，但能确定循环的成立条件时用while循环
·while 语法：

        while 条件表达式：
             语句块
        
        
#如果年利率是6.7%，本利是每年翻滚，则多少年后会翻倍
#如果拿到钱，就庆贺一下
benqian=10000
year=0
while benqian<20000:
    benqian=benqian*(1+0.067)
    year += 1
    print("第{0}年拿了{1}元钱".format(year,benqian))
else:
    print("今晚喝酒，庆贺一下")
    
    
#函数
·代码的一种组织形式
·一个函数一般完成一个特定功能
·函数定义：
    ·函数需要先定义
    ·使用函数，俗称调用
    
    
#定义一个函数
#只是定义的话不会执行
#1、def关键字，后跟一个空格
#2、函数名，自己定义，起名需要遵守命名规则，约定俗成，大驼峰命名只给类用
#3、后边括号和冒号不能省，括号内可以有参数
#4、函数内所有代码都缩进

def func():
    print("我是一个函数")
    print("好饿啊")
print("现在下班")


#函数的调用
#直接函数名后跟括号
func()


#函数的参数和返回值
·参数：负责给函数传递一些必要的数据或信息
    ·形参（形式参数）:在函数定义的时候用到的参数没有具体值，只是一个占位的符号，称为形参
    ·实参（实际参数）:再调用函数输入的值
·返回值：函数的执行结果
    ·使用return关键字
    ·如果没有return，默认返回一个NONE
    ·函数一旦执行一个return语句，则无条件返回，即结束函数的执行
    
    
#函数的定义和使用
#在这里，参数name只是一个符号，代表的式调用时的一个数据
#调用的时候，会用p的值替代函数中的所有name

def hello(name):
    print("{0},你怎么了".format(name))
    print("sir,你不理我就走了")

p="wenwen"
hello(p)


#return语句的基本使用
#函数打完招呼后返回一句话

def hello(name):
    print("{0},你怎么了".format(name))
    print("sir,你不理我就走了")

    return("我已经和{0}打过招呼了，{1}不理我".format(name,name))

p="wenwen"
rst=hello(p)
print(rst)


def hello(name):
    print("{0},你怎么了".format(name))
    return "哈哈 我提前结束了"
    print("sir,你不理我就走了")
    return("我已经和{0}打过招呼了，{1}不理我".format(name,name))

p="wenwen"
rst=hello(p)
print(rst)


for row in range(1,10):
    print ("{0}....a line".format(row))
    
    
for row in range(1,10):
    for col in range(1,row):
        print (row*col,end="   ")
    print("...........")
    
    
def printline(row):
    for col in range(1,row+1):
        print (row*col,end="   ")
    print("  ")
for row in range(1,10):
    printline(row)
    
    
#参考资料
·https://www.cnblogs.com/bingabcd/p/6671368.html
·python参考资料：headfirst python>零基础入门学习python（小甲鱼）>习题>腾讯公开课


·参数分类
    ·普通参数
    ·默认参数
    ·关键字参数
    ·收集参数
    
·普通参数
    ·定义的时候可以直接定义变量名
    ·词用的时侯直接把变量或者值放入指定位置
    
                def 函数名(参数1，参数2.....):
                    函数体
                
                #调用
                函数名(value1,value2.....)
                
                #调用的时候，具体值参考位置，按位置赋值
                
·默认参数
        ·形参居有默认值
        ·调用的时候，如果没有相对应的参数，即使用默认参数
        
        
def reg(name,age,gender="male"):
    if gender=="male":
        print("{0} is {1},and he is a good student".format(name,age))
    else:
        print("{0} is {1},and she is a good student".format(name,age))
reg(p,21)



