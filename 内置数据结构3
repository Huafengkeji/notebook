#len:获取元组的长度
t = (1,2,3,4,5,6)
len(t)

#max,min:最大值，最小值
#如果，列表中有多个最大值，最小值，则实际打印出多个
print(max(t))
print(min(t))

#tupple：转化成创建元组
l = [1,2,3,4,5]
t = tuple(l)
print(t)
t = tuple()
print(t)


#count:计算指定数据的次数
t = (2,1,3,4,2,5,6,8,6,7,8,67)
print(t.count(2))

#index:求指定元素在元组中的指定位置
#如果查找的数字是多个，则返回第一个
print(t.index(5))

#元组变量交换法
#两个变量交换值
a = 1
b = 3
print(a)
print(b)
print("*"*10)

#java写法：
c = a
a = b
b = c
print(a)
print(b)
print("*"*10)

#python写法
a,b = b,a
print(a)
print(b)


#集合的定义
s = set()
print(type(s))
print(s)

#此时，大括号内一定要有值，否则定义出来的只是一个dict
s = {1,2,3,4,5,6}
print(type(s))
print(s)

#如果只是用大括号定义，则定义的是一个dict类型
d = {}
print(type(d))
print(d)


#集合序列操作
    #成员检测
    #in,not in
s = {4,5,"love","wenwen"}
print(s)

if 4 in s:
    print("可以")
if "xiaojing" not in s:
    print("不可以")
    
    
#集合的遍历操作
    #for循环
s = {4,5,"love","wenwen"}
for i in s:
    print(i,end="  ")
    
    #带有元组的集合遍历
s = {(1,2,3),("i","love","wenwne"),(4,5,6)}
for k,v,w in s:
    print(k,"..",v,"..",w,"..")
for k in s:
    print(k)


#集合的内涵
    #普通集合内涵
    #以下集合在初始化后自动过滤掉重复元素
s = {1,2,3,4,5,6,4,7,8,9,9}
print(s)

    #普通集合内涵
ss = (i for i in s)
print(ss)
sss = {i for i in s}
print(sss)
ssss = {i for i in s if i % 2 == 0}
print(ssss)

    #多循环的集合内涵
s1 = {1,2,3,4}
s2 = {"i","love","wenwne"}
s = {m*n for m in s1 for n in s2}
print(s)
ss = {m*n for m in s1 for n in s2 if m ==2}
print(ss)


s = {1,2,3,4,5,6,4,7,8,9,9}
print(len(s))
print(max(s))
print(min(s))

    #set:生成一个集合
l = [1,2,3,4,5,6,7,8]
s = set(l)
print(s)

    #add:向集合中添加一个值
s = {1,2,3,4}
s.add(112)
print(s)

    #clear
    #结果表明clear是原地清空数据
s = {1,2,3,4}
print(s)
print(id(s))
s.clear()
print(s)
print(id(s))

    #remove：移除指定的值，直接改变原有值，如果删除的值不存在，报错
    #copy：拷贝
    #discard:移除集合中的指定值，跟remove一样，但是如果要删除的话，不报错
s = {1,2,3,4}
s.remove(1)
s.discard(2)
print(s)
print("*"*20)
s.discard(20)
print(s)
#s.remove(20)
#print(20)

    #pop:随机移除一个元素
s = {1,2,3,4}
print(s)
s.pop()
print(s)


#集合函数
    #intersection：交集
    #difference：差集
    #union：并集
    #issubset:检查一个集合是否为另一个集合子集
    #issuperset:检查一个集合是否为另一个集合的超集
s1 = {1,2,3,4,5,6}
s2 = {4,5,6,7,8}
ss = s1.intersection(s2)
print(ss)
sss = s1.difference(s2)
print(sss)
ssss = s1.union(s2)
print(ssss)
s_1 = s1.issubset(s2)
print(s_1)

    #集合函数数字学操作
s1 = {1,2,3,4,5,6}
s2 = {4,5,6,7,8}
s_4 = s1-s2
print(s_4)
    #不可进行加法
#s_3 = s1+s2
#print(s_3)

    #frozen set:冰冻集合
    #冰冻就是不可以任何操作的集合
    #frozen是一种特殊的集合
a = {1,2,3,4,5,6}
s = frozenset(a)
print(s)
print(type(s))

#dict字典
    #字典是一种组合数据，没有顺序的组合数据，数据以键值对形式出现

    #创建空字典1
d = dict()
print(d)

    #创建空字典2
a = {}
print(a)

    #创建有值的字典，每一组数据用冒号隔开，没一组键值用逗号隔开
d = {"one":1,"two":2,"three":3}
print(d)

    #用dict创建有内容的字典
d = dict({"one":1,"two":2,"three":3})
print(d)

    #用dict创建有内容的字典，利用关键字参数
d = dict(one=1,two=2,three=3)
print(d)
d = dict([("one",1),("two",2),("three",3)])
print(d)

#字典的特征
    #字典是序列类型，但是是无序类型，所以没有分片和索引
    #字典中的数据每个都有键值对应，即kv对
        #key:必须是可hash的值，比如int,str,float,tuple,但是list,set,dict不行
        #value：任何值

#字典常见的操作    
    #访问数据
d = {"one":1,"two":2,"three":3}
    #注意访问格式
    #中括号中的是键值
print(d["one"])

d["one"] = "eins"
print(d)

    #删除某个操作
    #使用del操作
del d["one"]
print(d)

    #成员检测： in， not in
    #成员检测的是key值内容
d = {"one":1,"two":2,"three":3}
#if 2 in d:
    #print("value")
    
if "two" in d:
    print("key")
    
#if ("two",2) in d:
   #print ("kv")


#遍历在python2 和 python3 中区别较大，代码各不相同
#按key值采用for循环
d = {"one":1,"two":2,"three":3}
    #使用for循环，直接按key值访问
for k in d:
    print(k,d[k])
    #上述代码可写成如下
for k in d.keys():
    print(k,d[k])
    #只访问字典的值
for v in d.values():
    print(v)
    # 注意以下特殊用法
for k,v in d.items():
    print(k,"...",v)

#字典生成式
d = {"one":1,"two":2,"three":3}
    #写字典生成式
dd = {k:v for k,v in d.items()}
print(dd)
    #加限制条件的字典生成式
dd = {k:v for k,v in d.items() if v % 2 == 0}
print(dd)
#字典相关函数
    #通用函数：len,max,min,dict
    #str(字典)：返回字典的字符串格式
d = {"one":1,"two":2,"three":3}
print(str(d))
    #clear:清空字典
    #items:返回字典的键值对组成的元组格式
d = {"one":1,"two":2,"three":3} 
i = d.items()
print(i)
print(type(i))
    #keys:返回字典的值组成一个结构
k = d.keys()
print(k)
print(type(k))
    #values:同理，一个可迭代的结构
v = d.values()
print(v)
print(type(v))
#get：根据指定的键返回相应的值，好处是，可以设定默认值
d = {"one":1,"two":2,"three":3}
print(d.get("one"))
print(d.get("on33"))
    #get默认值是none，可以设置
print(d.get("one",100))
print(d.get("on33",100))
#fromkeys:使用指定的序列作为键，使用一个值作为字典的所有键的值
l = ["enis",1,2,3,4,5]
    #注意fromkeys两个参数的值
    #注意fromkeys的调用主体
d = dict.fromkeys(l,"hahahah")
print(d)



